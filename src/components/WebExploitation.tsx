import React, { useState, useEffect } from 'react';
import { Shield, Lock, Upload, Cookie, Eye, Code, Key, UserX, FileText, Terminal, Star, Clock, Trophy, Lightbulb } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { 
  saveChallengeProgress, 
  getChallengeProgress, 
  getAllChallengeProgress,
  ChallengeProgress 
} from '../utils/dataStorage';

// Import individual challenges
import WeakLogin from './challenges/WeakLogin';
import UploadInvasion from './challenges/UploadInvasion';
import CookieMonster from './challenges/CookieMonster';
import HiddenPanel from './challenges/HiddenPanel';
import XSSPlayground from './challenges/XSSPlayground';
import SSTIExpress from './challenges/SSTIExpress';
import JWTUnchained from './challenges/JWTUnchained';
import BrokenAuthFlow from './challenges/BrokenAuthFlow';
import LFIFiesta from './challenges/LFIFiesta';
import RCECarnival from './challenges/RCECarnival';

interface Challenge {
  id: string;
  title: string;
  description: string;
  vulnType: string;
  difficulty: 'Easy' | 'Medium' | 'Hard';
  icon: React.ComponentType<any>;
  component: React.ComponentType<any>;
  completed: boolean;
  flagFormat: string;
  tools: string[];
}

interface WebExploitationProps {
  completedChallenges: string[];
  onChallengeComplete: (challengeId: string, flag: string) => void;
}

const WebExploitation: React.FC<WebExploitationProps> = ({ completedChallenges, onChallengeComplete }) => {
  const [activeChallenge, setActiveChallenge] = useState<string | null>(null);

  const challenges: Challenge[] = [
    {
      id: 'weak-login',
      title: 'Weak Login',
      description: 'Login form vulnerable to SQL injection attacks',
      vulnType: 'SQL Injection',
      difficulty: 'Easy',
      icon: Lock,
      component: WeakLogin,
      completed: false,
      flagFormat: 'flag{sql_injection_master}',
      tools: ['SQLMap', 'Burp Suite', 'Manual Testing']
    },
    {
      id: 'upload-invasion',
      title: 'Upload Invasion',
      description: 'Upload portal allows execution of malicious web shells',
      vulnType: 'Unrestricted File Upload',
      difficulty: 'Medium',
      icon: Upload,
      component: UploadInvasion,
      completed: false,
      flagFormat: 'flag{shell_upload_pwned}',
      tools: ['Web Shell', 'File Extension Bypass', 'MIME Type Manipulation']
    },
    {
      id: 'cookie-monster',
      title: 'Cookie Monster',
      description: 'Bypass authentication via cookie tampering techniques',
      vulnType: 'Insecure Cookie Auth',
      difficulty: 'Medium',
      icon: Cookie,
      component: CookieMonster,
      completed: false,
      flagFormat: 'flag{cookie_manipulation_expert}',
      tools: ['Browser DevTools', 'Cookie Editor', 'Burp Suite']
    },
    {
      id: 'hidden-panel',
      title: 'Hidden Panel',
      description: 'Find and access the secret administrative panel',
      vulnType: 'Obscure Routing / Bruteforce',
      difficulty: 'Easy',
      icon: Eye,
      component: HiddenPanel,
      completed: false,
      flagFormat: 'flag{admin_panel_discovered}',
      tools: ['DirBuster', 'Gobuster', 'Manual Enumeration']
    },
    {
      id: 'xss-playground',
      title: 'XSS Playground',
      description: 'Exploit stored XSS vulnerability in comment system',
      vulnType: 'Stored XSS',
      difficulty: 'Medium',
      icon: Code,
      component: XSSPlayground,
      completed: false,
      flagFormat: 'flag{xss_payload_executed}',
      tools: ['XSS Payloads', 'Browser Console', 'BeEF Framework']
    },
    {
      id: 'ssti-express',
      title: 'SSTI Express',
      description: 'Server-side template injection in Node.js application',
      vulnType: 'Server-Side Template Injection',
      difficulty: 'Hard',
      icon: Terminal,
      component: SSTIExpress,
      completed: false,
      flagFormat: 'flag{template_injection_rce}',
      tools: ['Template Payloads', 'Tplmap', 'Manual Testing']
    },
    {
      id: 'jwt-unchained',
      title: 'JWT Unchained',
      description: 'Bypass JWT authentication via algorithm confusion',
      vulnType: 'JWT Token Bypass',
      difficulty: 'Medium',
      icon: Key,
      component: JWTUnchained,
      completed: false,
      flagFormat: 'flag{jwt_algorithm_bypassed}',
      tools: ['JWT.io', 'JWT Tool', 'Burp Suite JWT Editor']
    },
    {
      id: 'broken-auth-flow',
      title: 'Broken Auth Flow',
      description: 'Logic vulnerability in password reset mechanism',
      vulnType: 'Broken Auth Logic',
      difficulty: 'Hard',
      icon: UserX,
      component: BrokenAuthFlow,
      completed: false,
      flagFormat: 'flag{auth_flow_manipulation}',
      tools: ['Burp Suite', 'Manual Testing', 'Session Analysis']
    },
    {
      id: 'lfi-fiesta',
      title: 'LFI Fiesta',
      description: 'Access sensitive server files via parameter manipulation',
      vulnType: 'Local File Inclusion (LFI)',
      difficulty: 'Medium',
      icon: FileText,
      component: LFIFiesta,
      completed: false,
      flagFormat: 'flag{file_inclusion_master}',
      tools: ['LFI Wordlists', 'Path Traversal', 'Log Poisoning']
    },
    {
      id: 'rce-carnival',
      title: 'RCE Carnival',
      description: 'Remote code execution via file upload and inclusion',
      vulnType: 'File Upload + RCE',
      difficulty: 'Hard',
      icon: Shield,
      component: RCECarnival,
      completed: false,
      flagFormat: 'flag{remote_code_execution_achieved}',
      tools: ['Web Shells', 'Reverse Shells', 'File Upload Bypass']
    }
  ];

  // Removed the useEffect that was loading progress data locally

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Easy': return 'text-green-400 border-green-400';
      case 'Medium': return 'text-yellow-400 border-yellow-400';
      case 'Hard': return 'text-red-400 border-red-400';
      default: return 'text-gray-400 border-gray-400';
    }
  };

  const handleChallengeComplete = (challengeId: string, flag: string) => {
    const challenge = challenges.find(c => c.id === challengeId);
    if (challenge && flag === challenge.flagFormat) {
      onChallengeComplete(challengeId, flag);
    }
  };
  
  const getScoreForDifficulty = (difficulty: string): number => {
    switch (difficulty) {
      case 'Easy': return 100;
      case 'Medium': return 200;
      case 'Hard': return 300;
      default: return 100;
    }
  };

  const completedCount = completedChallenges.length;
  const totalChallenges = challenges.length;

  if (activeChallenge) {
    const challenge = challenges.find(c => c.id === activeChallenge);
    if (challenge) {
      const ChallengeComponent = challenge.component;
      return (
        <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900">
          <div className="container mx-auto px-4 py-8">
            <div className="mb-6">
              <button
                onClick={() => setActiveChallenge(null)}
                className="flex items-center gap-2 text-cyan-400 hover:text-cyan-300 transition-colors"
              >
                ‚Üê Back to Web Exploitation
              </button>
            </div>
            
            <div className="bg-gray-800/50 border border-gray-700 rounded-lg p-6 mb-6">
              <div className="flex items-center gap-4 mb-4">
                <challenge.icon className="w-8 h-8 text-cyan-400" />
                <div>
                  <h1 className="text-2xl font-bold text-white">{challenge.title}</h1>
                  <p className="text-gray-400">{challenge.description}</p>
                </div>
              </div>
              
              <div className="flex flex-wrap gap-4 text-sm">
                <span className={`px-3 py-1 rounded border ${getDifficultyColor(challenge.difficulty)}`}>
                  {challenge.difficulty}
                </span>
                <span className="px-3 py-1 rounded border border-purple-400 text-purple-400">
                  {challenge.vulnType}
                </span>
                <span className="text-gray-400">
                  Tools: {challenge.tools.join(', ')}
                </span>
              </div>
            </div>

            <ChallengeComponent
              onComplete={(flag: string) => handleChallengeComplete(challenge.id, flag)}
              isCompleted={completedChallenges.includes(challenge.id)}
            />
          </div>
        </div>
      );
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center gap-3 mb-4">
            <Shield className="w-12 h-12 text-cyan-400" />
            <h1 className="text-4xl font-bold text-white">Web Exploitation</h1>
          </div>
          <p className="text-xl text-gray-400 mb-6">
            Master real-world web application vulnerabilities and exploitation techniques
          </p>
          
          {/* Progress Stats */}
          <div className="flex items-center justify-center gap-8 mb-8">
            <div className="flex items-center gap-2">
              <Trophy className="w-5 h-5 text-yellow-400" />
              <span className="text-white">{completedCount}/{totalChallenges} Completed</span>
            </div>
            <div className="flex items-center gap-2">
              <Star className="w-5 h-5 text-cyan-400" />
              <span className="text-white">
                {Math.round((completedCount / totalChallenges) * 100)}% Progress
              </span>
            </div>
          </div>

          {/* Progress Bar */}
          <div className="max-w-md mx-auto bg-gray-700 rounded-full h-2">
            <div 
              className="bg-gradient-to-r from-cyan-400 to-blue-500 h-2 rounded-full transition-all duration-500"
              style={{ width: `${(completedCount / totalChallenges) * 100}%` }}
            ></div>
          </div>
        </div>

        {/* Challenge Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {challenges.map((challenge) => (
            <div
              key={challenge.id}
              className={`bg-gray-800/50 border rounded-lg p-6 cursor-pointer transition-all hover:scale-105 ${
                completedChallenges.includes(challenge.id)
                  ? 'border-green-500 bg-green-900/20' 
                  : 'border-gray-700 hover:border-cyan-500'
              }`}
              onClick={() => setActiveChallenge(challenge.id)}
            >
              <div className="flex items-center gap-3 mb-4">
                <challenge.icon className={`w-8 h-8 ${completedChallenges.includes(challenge.id) ? 'text-green-400' : 'text-cyan-400'}`} />
                <div className="flex-1">
                  <h3 className="text-lg font-semibold text-white">{challenge.title}</h3>
                  {completedChallenges.includes(challenge.id) && (
                    <div className="flex items-center gap-1 text-green-400 text-sm">
                      <Trophy className="w-4 h-4" />
                      <span>Completed</span>
                    </div>
                  )}
                </div>
              </div>

              <p className="text-gray-400 text-sm mb-4">{challenge.description}</p>

              <div className="flex flex-wrap gap-2 mb-4">
                <span className={`text-xs px-2 py-1 rounded border ${getDifficultyColor(challenge.difficulty)}`}>
                  {challenge.difficulty}
                </span>
                <span className="text-xs px-2 py-1 rounded border border-purple-400 text-purple-400">
                  {challenge.vulnType}
                </span>
              </div>

              <div className="flex items-center justify-between text-sm text-gray-500">
                <div className="flex items-center gap-1">
                  <Lightbulb className="w-4 h-4" />
                  <span>Flag Format</span>
                </div>
                <span className="font-mono text-xs">flag{'{...}'}</span>
              </div>
            </div>
          ))}
        </div>

        {/* Footer */}
        <div className="text-center mt-12 text-gray-500 text-sm">
          <p>üîê Practice ethical hacking in a safe, controlled environment</p>
          <p>All challenges are designed for educational purposes only</p>
        </div>
      </div>
    </div>
  );
};

export default WebExploitation;
